@page "/mygame"
@using System.IO;
@using Blazor.FileReader;
@using pax.s2decode.Models;
@using dsmm_server.Data;
@using dsmm_server.Models;
@using System.Collections.Concurrent;
@using System.Threading;
@using DSmm.Models;
@using DSmm.Trueskill;
@using DSmm.Repositories;
@inject ScanStateChange _state
@inject ReportService _repserv
@inject StartUp _startUp
@inject IMMrepositoryNG _mm
@inject IFileReaderService fileReaderService;

<h3>MyGame</h3>

<style>
    .droptarget {
        display: block;
        padding: 20px;
        margin-bottom: 10px;
        border: 1px dashed black;
        border-radius: 5px;
    }

    .droptarget-drag {
        border-color: orangered;
        font-weight: bold;
    }
</style>
<div>
    <h4>
        <span class="badge @InfoBadge border border-info mr-2">
            @InfoBadgeMsg
        </span>
    </h4>
</div>
<div class="form-group">
    <label for="i_replay">Choose replay</label>
    <input type="file" @ref=inputTypeFileElement id="i_replay" name="replay" accept=".SC2Replay" />
</div>
<!--
<div class="input-group mb-3 w-50">
    <div class="input-group-prepend">
        <span class="input-group-text" id="inputGroupFileAddon01">Upload</span>
    </div>
    <div class="custom-file">
        <input type="file" class="custom-file-input" id="inputGroupFile01" aria-describedby="inputGroupFileAddon01">
        <label class="custom-file-label" for="inputGroupFile01">Choose replay</label>
    </div>
</div>
    -->
<div class="@DropClass"
     @ref=dropTargetElement
     @ondrop=OnDrop
     @ondragenter=OnDragEnter
     @ondragleave=OnDragLeave>
    Drop Files here.
    @foreach (var fileInfo in FileList)
    {
        <br />@fileInfo.Name
    }
</div>

<a>By uploading the replay you agree, that the replay and its data will be used on this website.</a>
<div>
    <button class="btn btn-primary" @onclick="@ReadFile">Upload</button>
    <button class="btn btn-sm btn-primary" @onclick="@ClearFile">Clear</button>
    <button class="btn btn-primary btn-sm" @onclick="@(() => _state.Update = !_state.Update)">Refresh</button>
    <!--<textarea style="max-width: 100%; overflow-y:scroll; " cols="40" rows="5">@Output</textarea>-->
</div>
@if (myreplay != null)
{
<div>
    <br />
    <h5>Your replay link: <a href="userreplays/@myreplay.ID">@myreplay.ID</a></h5>
    <br />
</div>
<div class="container-fluid">
    <Game replay="myreplay" _pl="@(new MMplayerNG())" />
</div>
}

@code {
    ElementReference inputTypeFileElement;
    ElementReference dropTargetElement;

    IFileReaderRef dropReference;

    const string dropTargetDragClass = "droptarget-drag";
    const string dropTargetClass = "droptarget";

    private List<string> _dropClasses = new List<string>() { dropTargetClass };
    string DropClass => string.Join(" ", _dropClasses);
    string Output { get; set; }
    List<IFileInfo> FileList { get; } = new List<IFileInfo>();


    byte[] buffer;
    string FileName = "Choose replay";

    string InfoBadge = "badge-info";
    string InfoBadgeMsg = "Upload";

    dsreplay myreplay = null;

    protected override async Task OnAfterRenderAsync(bool isFirstRender)
    {
        dropReference = fileReaderService.CreateReference(dropTargetElement);
        await dropReference.RegisterDropEventsAsync();
    }

    public async Task ClearFile()
    {
        FileName = "Choose replay";
        try
        {
            await dropReference.ClearValue();
            await this.RefreshFileList();
        }
        catch { }
    }

    public void OnDragEnter(EventArgs e)
    {
        _dropClasses.Add(dropTargetDragClass);
    }

    public void OnDragLeave(EventArgs e)
    {
        _dropClasses.Remove(dropTargetDragClass);
    }

    public async Task OnDrop(EventArgs e)
    {
        Output += "Dropped a file.";
        _dropClasses.Remove(dropTargetDragClass);
        this.StateHasChanged();
        await this.RefreshFileList();
    }

    private async Task RefreshFileList()
    {
        this.FileList.Clear();
        foreach (var file in await dropReference.EnumerateFilesAsync())
        {
            var fileInfo = await file.ReadFileInfoAsync();
            this.FileList.Add(fileInfo);
        }
        this.StateHasChanged();
    }

    public async Task ReadFile()
    {
        Output = string.Empty;
        this.StateHasChanged();

        int i = 0;
        bool valid = true;
        ConcurrentDictionary<int, byte[]> fileBytes = new ConcurrentDictionary<int, byte[]>();
        foreach (var file in await fileReaderService.CreateReference(inputTypeFileElement).EnumerateFilesAsync())
        {
            i++;
            if (i > 1)
            {
                valid = false;
                Output += "Only one file upload is allowed.";
                InfoBadge = "badge-danger";
                InfoBadgeMsg = "Only one file to upload is allowed.";
                break;
            }
            (valid, fileBytes) = await GetFile(file);
        }

        foreach (var file in await dropReference.EnumerateFilesAsync())
        {
            i++;
            if (i > 1)
            {
                valid = false;
                Output += "Only one file upload is allowed.";
                InfoBadge = "badge-danger";
                InfoBadgeMsg = "Only one file to upload is allowed.";
                break;
            }
            (valid, fileBytes) = await GetFile(file);
        }


        if (i == 0)
        {
            Output = "Pelase select one file.";
            InfoBadge = "badge-danger";
            InfoBadgeMsg = "Pelase select one file";
            StateHasChanged();
            return;
        }
        if (valid == true && _mm != null)
        {
            DateTime t = DateTime.UtcNow;

            string upRep = Program.myreplaydir + "/" + t.ToString("yyyyMMddHHmmss") + ".SC2Replay";
            while (File.Exists(upRep))
            {
                t.AddSeconds(1);
                upRep = Program.myreplaydir + "/" + t.ToString("yyyyMMddHHmmss") + ".SC2Replay";
            }

            await File.WriteAllBytesAsync(upRep, Concat(fileBytes.Values.ToArray()));
            Output += "Decoding replay..." + Environment.NewLine;
            InfoBadge = "badge-info";
            InfoBadgeMsg = "Decoding ..";
            StateHasChanged();
            dsreplay replay = await _repserv.myDecode(upRep, int.Parse(t.ToString("MMddHHmmss")), true);
            if (replay == null)
            {
                InfoBadge = "badge-danger";
                InfoBadgeMsg = "Decoding Replay failed.";
            }
            else
            {
                myreplay = replay;
                InfoBadge = "badge-success";
                InfoBadgeMsg = "Replay successfully decoded";
                StateHasChanged();
            }
        }
        else
        {
            InfoBadge = "badge-danger";
            InfoBadgeMsg = "Upload failed";
            Output = "Upload failed :(";
        }
    }

    async Task<(bool, ConcurrentDictionary<int, byte[]>)> GetFile(IFileReference file)
    {
        ConcurrentDictionary<int, byte[]> fileBytes = new ConcurrentDictionary<int, byte[]>();
        bool valid = true;
        var nl = Environment.NewLine;
        var fileInfo = await file.ReadFileInfoAsync();
        Output += $"{nameof(IFileInfo)}.{nameof(fileInfo.Name)}: {fileInfo.Name}{nl}";
        Output += $"{nameof(IFileInfo)}.{nameof(fileInfo.Size)}: {fileInfo.Size}{nl}";
        Output += $"{nameof(IFileInfo)}.{nameof(fileInfo.Type)}: {fileInfo.Type}{nl}";
        Output += $"{nameof(IFileInfo)}.{nameof(fileInfo.LastModifiedDate)}: {fileInfo.LastModifiedDate?.ToString() ?? "(N/A)"}{nl}";
        Output += $"Reading file...";
        this.StateHasChanged();

        // 10 MB
        if (fileInfo.Size > 10485760)
        {
            Output += "File size exceeds limit.";
            valid = false;
        }

        using (var fs = await file.OpenReadAsync())
        {
            var bufferSize = 4096;
            var buffer = new byte[bufferSize];
            int count;
            int j = 0;
            while ((count = await fs.ReadAsync(buffer, 0, buffer.Length)) != 0)
            {

                fileBytes[j] = buffer.ToArray();
                Output += $"Read {count} bytes. {fs.Position} / {fs.Length}{nl}";

                if (j == 0)
                {
                    if (buffer[0] != 77 || buffer[1] != 80 || buffer[2] != 81)
                    {
                        Output += "Not a valid replay.";
                        valid = false;
                        break;
                    }

                }
                Interlocked.Increment(ref j);
                this.StateHasChanged();
            }
            Output += $"Done reading file {fileInfo.Name}{nl}.";
        }
        this.StateHasChanged();
        return (valid, fileBytes);
    }

    public static byte[] Concat(params byte[][] arrays)
    {
        using (var mem = new MemoryStream(arrays.Sum(a => a.Length)))
        {
            foreach (var array in arrays)
            {
                mem.Write(array, 0, array.Length);
            }
            return mem.ToArray();
        }
    }
}
